;; Copyright (C) 2024  David Thompson <dave@spritely.institute>
;;
;; This file is part of guile-commonmark
;;
;; guile-commonmark is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.
;;
;; guile-commonmark is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public License
;; along with guile-commonmark.  If not, see <http://www.gnu.org/licenses/>.

(define-module (commonmark html)
  #:use-module (commonmark blocks)
  #:use-module (commonmark inlines)
  #:use-module (commonmark node)
  #:use-module (srfi srfi-1)
  #:export (commonmark->html))

(define* (commonmark->html #:optional (string-or-port (current-input-port)))
  (define (node-ref n key)
    (assq-ref (node-data n) key))
  (define (node->text n)
    (if (text-node? n)
        (node-children n)
        (fold-text n)))
  (define (fold-text n)
    (fold (lambda (elem prev)
            (append (node->text elem) prev))
          '()
          (node-children n)))
  (define (concat-text n)
    (string-concatenate (fold-text n)))
  (define (display/escaped str port)
    (string-for-each (lambda (c)
                       (case c
                         ((#\") (display "&quot;" port))
                         ((#\&) (display "&amp;" port))
                         ((#\<) (display "&lt;" port))
                         ((#\>) (display "&gt;" port))
                         (else (display c port))))
                     str))
  (define (write-verbatim strs port)
    (for-each (lambda (str) (display/escaped str port)) (reverse strs)))
  (define (write-children n port)
    (for-each (lambda (n) (write-node n port)) (reverse (node-children n))))
  (define (write-node n port)
    (cond ((thematic-break-node? n)
           (display "<hr>" port))
          ((paragraph-node? n)
           (display "<p>" port)
           (write-children n port)
           (display "</p>\n" port))
          ((block-quote-node? n)
           (display "<blockquote>\n" port)
           (write-children n port)
           (display "</blockquote>\n" port))
          ((code-block-node? n)
           (display "<pre><code>" port)
           (write-verbatim (node-children n) port)
           (display "\n</code></pre>\n" port))
          ((fenced-code-node? n)
           (display "<pre><code infostring=\"" port)
           (display/escaped (node-ref n 'info-string) port)
           (display "\">" port)
           (write-verbatim (node-children n) port)
           (display "\n</code></pre>\n" port))
          ((heading-node? n)
           (let ((tag (case (node-ref n 'level)
                        ((1) "h1")
                        ((2) "h2")
                        ((3) "h3")
                        ((4) "h4")
                        ((5) "h5")
                        ((6) "h6"))))
             (format port "<~a>" tag)
             (write-children n port)
             (format port "</~a>\n" tag)))
          ((list-node? n)
           (let ((tag (case (node-ref n 'type)
                        ((bullet) "ul")
                        (else "ol")))
                 (tight? (node-ref n 'tight)))
             (format port "<~a>\n" tag)
             (for-each (lambda (n)
                         (cond
                          ((item-node? n)
                           (display "<li>" port)
                           (cond ((and tight?
                                       (not (null? (node-children n)))
                                       (paragraph-node? (last-child n)))
                                  (write-children (last-child n) port))
                                 (else
                                  (newline port)
                                  (write-children n port)))
                           (display "</li>\n" port))
                          (else (error "not an item" n))))
                       (reverse (node-children n)))
             (format port "</~a>\n" tag)))
          ((text-node? n)
           (display/escaped (last-child n) port))
          ((code-span-node? n)
           (display "<code>" port)
           (write-verbatim (node-children n) port)
           (display "</code>" port))
          ((softbreak-node? n)
           (newline port))
          ((hardbreak-node? n)
           (display "<br>" port))
          ((emphasis-node? n)
           (let ((tag (case (node-ref n 'type)
                        ((em) 'em)
                        (else 'strong))))
             (format port "<~a>" tag)
             (write-children n port)
             (format port "</~a>" tag)))
          ((link-node? n)
           (let ((dest (node-ref n 'destination))
                 (title (node-ref n 'title)))
             (display "<a href=\"" port)
             (display/escaped dest port)
             (display "\"" port)
             (when title
               (display " title=\"" port)
               (display/escaped title port)
               (display "\"" port))
             (display ">" port)
             (write-children n port)
             (display "</a>" port)))
          ((image-node? n)
           (let ((dest (node-ref n 'destination))
                 (title (node-ref n 'title))
                 (alt (concat-text n)))
             (display "<img src=\"" port)
             (display/escaped dest port)
             (display "\" alt=\"" port)
             (display/escaped alt port)
             (display "\"" port)
             (when title
               (display " title=\"" port)
               (display/escaped title port)
               (display "\"" port))
             (display " />" port)))
          ((html-block-node? n)
           (display (last-child n) port)
           (newline port))
          ((inline-html-node? n)
           (display (last-child n) port))
          (else (error "unknown node" n))))
  (define (document->html d)
    (if (document-node? d)
        (call-with-output-string
          (lambda (port)
            (write-children d port)))
        (error "not a document node")))
  (let ((port (if (string? string-or-port)
                  (open-input-string string-or-port)
                  string-or-port)))
    (document->html (parse-inlines (parse-blocks port)))))
